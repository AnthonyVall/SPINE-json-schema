{
  "$id":"https://raw.githubusercontent.com/SPINEProject/SPINE-json-schema/master/schemas/tool.schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Tool Schema",
  "Restrictions": [
  	"At least one image is required, at least for now",
  	"At least one viewer is required, at leas for now",
  	"A viewer displays at least one image",
    "For now we are dealing with rois that cannot be decomposed into sub-rois, for instance annotate differently each voxel of an ROI",
    "The annotation properties are only handle for ontology based annotations",
    "Tell Charles that the annotation table is a simplistic approach, there is no way to concate options, for instance if some characteristics depend on the value of others"
  ],
  "TODOS": [
    "Instead of using groups, e.g., imagingVariableGroup, we should use a parameter list, as done in boutiques",
    "Define the outputs!!! ROI??!!!!",
  	"Define the SPINE Types using the definitions of ROIs and annotations",
  	"Define if the viewer should offer to display the images in different mode regarding organization of the voxels: RAI, RAS, ...",
  	"Add the paint brush as widget",
    "Status of the Task Instance, don't forget to add it",
    "Add all the required attributes!",
    "PossibleImagesToDisplay in the displayImages in the viewer section has to have an option to say dispay all images",
    "How to make this definitions independent of SPINE types? In case in the future we would like to share/publish this work",
    "Create different definitions of tools based on the type.",
    "map_InputROIs_OuputAnnotations might be an object instead of an array to make sure there is only one list of exposed annotation concepts for a given roi in the input",
    "Linking property for the viewers"
  ],

  "definitions": {

    "toolType":{
      "$id": "#toolType",
      "description": "Type of tool. This defines the layout to be used. SLICE_SELECTOR_TOOL refers to a tool where a slice is selected. SEGMENTATION_TOOL refers to a tool where a segmentation is created. CONFIRMATION_TOOL refers to a tool to confirm results, the output is only true/false without need for binding to anything.",
      "$comment": "It is deprecated property. There is no much use of it due to the fact that tool configuration is now flexible and allows to have both segmentation and annotation widgets in a single configuration.",
      "type": "string",
      "enum": ["SLICE_SELECTOR_TOOL", "SEGMENTATION_TOOL", "CONFIRMATION_TOOL", "ANNOTATION_TOOL",
        "IDENTIFICATION_TOOL", "CHARACTERIZATION_TOOL", "SLICE_SELECTOR_PICKER_TOOL", "SLICE_SELECTOR_TOOL_RANGED",
        "SLICE_SELECTOR_WITH_PICKER", "VISUALIZATION_TOOL"]
    },

    "layoutViewersType":{
      "$id": "#layoutViewersType",
      "description": "Type of viewers layout.",
      "type": "string",
      "enum": ["SINGLE","1M1R_IN_ROW","SINGLE_WITH_WIDGET_PANEL", "1M4R", "1M2R", "1M2R_WIDGETS","1M1R_ARROWS", "ROW"]
    },

    "possibleValueInAnnotationTable": {
      "$id": "#possibleValueInAnnotationTable",
      "description": "A possible value of an annotation.",
      "type": "object",
      "properties":{
        "valueInOntology": {
          "description": "Value in the ontology.",
          "type": "string"
        },
        "valueToDisplay": {
          "description": "Value in to be displayed to the user.",
          "type": "string"
        }
      }
    },

    "defaultAnnotationTableOption":{
      "$id" : "#defaultAnnotationTableOption",
      "description": "A default option of an annotation table",
      "type": "object",
      "properties": {
        "title":{
          "description": "Title of the option. It can be displayed if required but cannot be modified. This can also be seen as the column name in an annotation table",
          "type": "string"
        },
        "typeAnnotation": {
          "type": "string",
          "enum": ["TEXT"]
        },
        "ontologyId": {
          "description": "Id of the ontology where the value of the annotation is retrieved.",
          "type": "string"
        },
        "ontologyConcept":{
          "description": "Concept of the annotation in the ontology.",
          "type": "string"
        },
        "valueToDisplay": {
          "description": "Value in to be displayed to the user.",
          "type": "string"
        }
      },
      "required":["title", "typeAnnotation", "ontologyId", "ontologyConcept"]
    },

    "annotationTableOption":{
      "$id" : "#annotationTableOption",
      "description": "One option of an annotation table",
      "type": "object",
      "properties": {
        "title":{
          "description": "Title of the option to be display. This can also be seen as the column name in an annotation table",
          "type": "string"
        },
        "typeAnnotation": {
          "type": "string",
          "enum": ["TEXT"]
        },
        "ontologyId": {
          "description": "Id of the ontology where the value of the annotation is retrieved.",
          "type": "string"
        },
        "hasDefaultValue":{
          "description": "If the annotation has a default value.",
          "type": "boolean"
        },
        "defaultValue": {
          "description": "This is the default value of the annotation.",
          "$ref": "#/definitions/possibleValueInAnnotationTable"
        },
        "possibleValues":{
          "description": "Possible values for the annotation.",
          "type": "array",
          "items": {
              "$ref": "#/definitions/possibleValueInAnnotationTable"
            }
        }
      },
      "required":["title", "typeAnnotation", "ontologyId", "hasDefaultValue"],
      "dependencies":{
        "defaultValue": {
          "properties":{
            "hasDefaultValue":{
              "enum": [true]
            }
          }
        }
      }
    },

    "inputsAnnotationTool": {
      "$id": "#inputsAnnotationTool",
      "description": "Inputs for the annotation tool. The spineInputOuput schema is extended to have a property required.",
      "type": "object",
      "patternProperties" : {
        ".*" : {
          "properties": {
            "required": {
              "description": "True if the input is required.",
              "type": "boolean"
            }
          },
          "required":["required"],
          "allOf":[
            {"$ref": "core.schema.json#/definitions/spineInputOuput"}
          ]
        }  
      }
    },

    "outputsAnnotationTool": {
      "$id": "#outputsAnnotationTool",
      "description": "Outputs for the annotation tool. The spineInputOuput schema used.",
      "type": "object",
      "patternProperties" : {
        ".*" : {
          "allOf":[
            {"$ref": "core.schema.json#/definitions/spineInputOuput"}
          ]
        }  
      }
    },

    "viewersTool": {
      "$id": "#viewersTool",
      "description": "Configuration of all the viewers for the tool.",
      "type": "object",
      "properties": {
        "layout":{
          "description": "Layout to be used for the viewers",
          "type": "object",
          "properties": {
            "type": {
              "description": "Layout to be used for the viewers",
              "$ref": "#/definitions/layoutViewersType"
            },
            "layoutOrder": {
              "description": "Assignation of viewer in the layout based on the order defined by the layout. The match is done by associating a key-name in the layout to the key-name of a viewer in the tool",
              "patternProperties": {
                ".*": {
                  "description": "String corresponding to the viewer key-name of a viewer in the tool",
                  "type": "string"
                }
              }
            }
          }
        },
        "renderWindows":{
          "description": "Configuration of the viewers in the tool",
          "patternProperties": {
            ".*": {
              "description": "Configuration of a viewer",
              "oneOf":[
                {"$ref": "viewer.schema.json#/definitions/viewer2D"},
                {"$ref": "viewer.schema.json#/definitions/viewer3D"}
              ]
            }
          }
        }
      },
      "required": ["layout", "renderWindows"]
    },

    "widgetsTool": {
      "$id": "#widgetsTool",
      "description": "Widget for the annotation tool.",
      "type": "object",
      "properties": {
      	"pointSelector": {
      	  "description": "Point selector tool",
          "type": "object",
          "properties": {
          	"roiAnnotationLinks": {
          	  "description": "List of roi annotation table ids that can be linked to the pointed roi. The id must refer to one of the annotation tables listed in the rois section",
              "type": "array",
              "items": {
                "type": "object",
                "properties":{
                  "nameRoi": {
                    "description": "Corresponds to the name of the roi to be used in the widget. The roi name must be part of the rois object.",
                    "type": "string"
                  },
                  "relationWithRoi": {
                    "description": "The point can be inside the roi or can be a explicit ROI, e.g., AC/PC points",
                    "type": "string",
                    "enum": ["implicit", "explicit"]
                  },
                  "implicitRelationWithRoi":{
                    "description": "In case that the relationWithRoi is an implicit relationship the implicit relationship type has to be defined here.",
                    "type": "string",
                    "enum": ["inside"]
                  },
                  "geometryPointer": {
                    "description": "Geometry of the pointer",
                    "type": "string",
                    "enum": ["point"]
                  }
                }
              }
          	}
          },
          "required": ["roiAnnotationLinks"]
      	}
      }
    },

    "roisAnnotationTable": {
      "$id": "#roisAnnotationTable",
      "description": "Annotation tables for the rois. For instance if the tool is used to annotation lesions and peri-ventricular spaces.",
      "type": "object",
      "minProperties": 1,
      "patternProperties": {
        ".*": {
          "type": "object",
    	    "properties": {
    	  	  "defaultAnnotations":{
    	  	    "type": "array",
    	  	    "items": {
                "$ref": "#/definitions/defaultAnnotationTableOption"
              }
    	  	  },
            "userAnnotations":{
              "type": "array",
              "items": {
                "$ref": "#/definitions/annotationTableOption"
              }
            }
    	    },
          "required": ["defaultAnnotations", "userAnnotations"]
        }
      }
    },

    "map_InputROI_OuputAnnotation":{
      "$id": "#map_InputROI_OuputAnnotation",
      "description": "Mapping of ROI in the inputs and the annotations added by the tool.",
      "type": "object",
      "properties": {
        "roiInputName": {
          "description": "Name of the input having the ROIs",
          "type": "string"
        },
        "annotationInputName": {
          "description": "Name of the input having the annotations",
          "type": "string"
        }
      }
    },

    "mappingFunction":{
      "$id": "#mappingFunction",
      "oneOf":[
        { "$ref": "#/definitions/map_InputROI_OuputAnnotation"}
      ]
    },

    "bindingToolInputToViewerInput":{
      "$id": "#bindinToolInputToViewerInput",
      "description": "Mapping a tool input to a viewer input",
      "type": "object",
      "properties": {
        "inputTool": {
          "description": "Key-name of the input to be connected to an input of a viewer",
          "type": "string"
        },
        "inputViewer": {
          "description": "Object defining the input for a viewer",
          "type": "object",
          "properties":{
            "viewerId":{
              "description":"Key-name of the viewer",
              "type":"string"
            },
            "property":{
              "description":"Property of the viewer to be connected to the input of the tool",
              "$ref": "viewer.schema.json#/definitions/viewerProperty" 
            }
          },
          "required": ["viewerId", "property"]
        }
      },
      "required": ["inputTool", "inputViewer"]
    },

    "bindingViewerOutputToToolOutput":{
      "$id": "#bindinViewerOutputToToolOutput",
      "description": "Mapping a viewer output to a tool output",
      "type": "object",
      "properties": {
        "outputTool": {
          "description": "Key-name of the tool output to be connected to an output of a viewer",
          "type": "string"
        },
        "outputViewer": {
          "description": "Object defining the output for a viewer",
          "type": "object",
          "properties":{
            "viewerId":{
              "description":"Key-name of the viewer",
              "type":"string"
            },
            "property":{
              "description":"Property of the viewer to be connected to the output of the tool",
              "$ref": "viewer.schema.json#/definitions/viewerProperty" 
            }
          },
          "required": ["viewerId", "property"]
        }
      },
      "required": ["outputTool", "outputViewer"]
    },

    "toolBasicProperties": {
      "$id": "#toolBasicProperties",
      "type": "object",
        "properties": {
          "name": {
            "description": "The name of the annotation tool. For instance, annotation tool with three viewers only axial planes.",
            "type": "string"
          },
          "description": {
            "description": "Description of the annotation tool.",
            "type": "string"      
          },
          "version": {
            "description": "Version of the annotation tool.",
            "type": "string"      
          },
          "privacy": {
            "description": "Privacy of the tool.",
            "$ref": "core.schema.json#/definitions/privacy"
          },
          "type": {
            "description": "This defines the type of tool. This is mostly used in the front-end to define what the tool outputs.",
            "$ref": "#/definitions/toolType"          
          },
          "annotationTables": {
            "description": "Configuration of the ROIs for the annotation tool.",
            "$ref": "#/definitions/roisAnnotationTable"
          },
          "inputs": {
            "description": "Inputs for the annotation tool.",
            "$ref": "#/definitions/inputsAnnotationTool"
          },
          "outputs": {
            "description": "Object with the outputs of the tool",
            "$ref":"#/definitions/outputsAnnotationTool"
          },
          "bindingToolInputsToViewerInputs": {
            "description": "Binding of tool inputs to the viewer inputs",
            "type": "array",
            "items": {
              "$ref": "#/definitions/bindingToolInputToViewerInput"
            }
          },
          "bindingViewerOutputsToViewesOutputs": {
            "description": "Binding of viewer's inputs to tool outputs",
            "type": "array",
            "items": {
              "$ref": "#/definitions/bindingViewerOutputToToolOutput"
            }
          },
          "configuration":{
            "description": "Configuration of the particular tool. For instance the particular configuration of an anotation tool.",
            "type": "object",
            "properties": {
              "viewers": {
                "description": "Configuration of the viewers for the tool.",
                "$ref": "#/definitions/viewersTool"
              },
              "widgets": {
                "description": "Configuration of the widgets for the tool.",
                "$ref": "#/definitions/widgetsTool"
              }
            }
          }
        },
        "required": ["name", "description", "version", "privacy", "type", "inputs", "outputs", "configuration"]
    },

    "tool_API_GET": {
      "description": "Schema for reponse when using GET",
      "allOf":[
        {"$ref": "#toolBasicProperties"},
        {
          "type": "object",
          "properties": {
            "creationDate": {
              "description": "Creation date of the annotation tool.",
              "type": "string"
            },
            "owner": {
              "description": "Owner of the annotation tool.",
              "type": "string"      
            }
          },
          "required":["creationDate", "owner"]
        }
      ]
    },

    "toolCreateAndAnnotateROI": {
      "$id": "#toolCreateAndAnnotateROI",
      "description": "Description of a tool that creates and annotates ROIs.",
      "allOf":[
        {"$ref": "#toolBasicProperties"},
        {
          "properties":{
            "annotationTables": {
              "description": "Configuration of the ROIs for the annotation tool.",
              "$ref": "#/definitions/roisAnnotationTable"
            },
            "exposedAnnotationConcepts": {
              "description": "All the exposed annotations concepts for a given ROI in the output",
              "type": "array"
            }
          }
        }
      ]
    },

    "toolAddAnnotation": {
      "$id": "#toolAddAnnotation",
      "description": "Description of a tool that adds annotations to ROIs.",
      "allOf":[
        {"$ref": "#toolBasicProperties"},
        {
          "properties":{
            "annotationTables": {
              "description": "Configuration of the ROIs for the annotation tool.",
              "$ref": "#/definitions/roisAnnotationTable"
            },
            "map_InputROIs_OuputAnnotations":{
              "description": "Mapping of the annotations that will added to each ROI in the input.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/map_InputROI_OuputAnnotation"
              }
            }
          }
        }
      ]
    },

    "toolCreateROI": {
      "$id": "#toolCreateROI",
      "description": "Description of a tool that creates ROIs.",
      "allOf":[
        {"$ref": "#toolBasicProperties"},
        {
          "properties":{
          }
        }
      ]
    }

  },

  "description": "Annotation Tool for Medical Images",
  "type": "object",
  "oneOf": [
    {"$ref": "#toolBasicProperties"}
  ]
}